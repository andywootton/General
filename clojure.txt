# Learning Clojure

I followed the instruction in 'Clojure for the Brave and True' to get a working emacs, CIDER & Leiningen configuration to develop in Clojure. I could now get a REPL by typing:

## The REPL

The Read-Execute-Print-Loop can be started with Leiningen

lein repl

but I didn't really understand how. I get why beginners may need to be protected from the complexity 
of the Clojure environment but it's not my first time at the rodeo so I'm left feeling I don't know what's going on. I'm not ready to accept that it's all done with magic until I'm in the Lisp environment!

https://clojure.org/reference/repl_and_main tells me:  

"The simplest way to launch a Clojure repl is to use the following command line from within Clojureâ€™s home directory:  
java -cp clojure.jar clojure.main"

We're asking java to run the clojure.jar file in the Java Virtual Machine then run clojure.main

Where's Clojure's home directory? The Leiningen install script which I stored in

~/bin/leiningen

seems to have put things in:

~/.lein/self-installs

so I 'cd' there and type:  

~/.lein/self-installs$ java -cp leiningen-2.7.1-standalone.jar clojure.main

I'm working on the theory that Clojure is embedded inside the Leiningen .jar file. It works! I get a prompt:

Clojure 1.8.0

and I get it much quicker, but with less output. 'lein repl' gives:

nREPL server started on port 41262 on host 127.0.0.1 - nrepl://127.0.0.1:41262  
REPL-y 0.3.7, nREPL 0.2.12  
Clojure 1.8.0  
OpenJDK 64-Bit Server VM 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11
 
I seem to have skipped some of Leiningen's environmental set-up.

## Connecting to a non-standard REPL in the Light Table editor
https://github.com/LightTable/LightTable/issues/851
"I launch "lein repl" in my project's directory and it tells me the address of the nrepl (127.0.0.1:port)  
I select "Connect to remote nrepl" in LT and put either 127.0.0.1:port or localhost:port and it stays connecting infinitely.  
If I close the repl it drops the connection (so it seems it can see the actual connection)."

Are you including the lighttable-ops middleware in your repl-options? e.g.

(defproject lttest "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [lein-light-nrepl "0.0.4"]]
  :repl-options {:nrepl-middleware [lighttable.nrepl.handler/lighttable-ops]})
    Docs: (doc function-name-here)  
          (find-doc "part-of-name-here")  
  Source: (source function-name-here)  
 Javadoc: (javadoc java-object-or-class-here)  
    Exit: Control+D or (exit) or (quit)  
 Results: Stored in vars *1, *2, *3, an exception in *e
<<<<<<< HEAD
 
I seem to have skipped some of Leiningen's environmental set-up.

## The Clojure Project Environment
### Upgrade Leiningen
Keep Leiningen up to date with the command:  
lein upgrade

### Create a Project
Create a new Clojure project in the current directory with:  
lein new my-project

then change default there with:  
cd my-project

It will have created a directory structure which includes

README.md ; what the project does, usage, licence

doc/intro.md ; documentation of the project

project.clj ; the configuration fie for the project and all its dependencies

src/my_project/core.clj ; main Clojure code file N.B. changes hyphens to under-scores.  
test/my_project/core_test.clj

It is good practice to change "core" in the name of the last 2 to a meaningful name, then edit each of them so the first line namespace definition matches the new name.

### Dependency Management with Leiningen

By default, Leiningen checks Clojars https://clojars.org/  
and Maven Central http://search.maven.org/

It stores dependencies on the local machine, by default in your maven home directory e.g. on Mac or Linux this is:

~/.m2/repository/org/clojure/clojure/1.6.0

You can show the tree structure of the libraries and versions that the current project is using with

lein deps :tree

#### Example: camel-snake-kebab

* this_is_snake_case  
* this-is-kebab-case  
* ThisIsCamelCase

There is a camel-snake-kebab library in Clojars pp. 90-97 give an example of using it and getting a test to pass.

## Communication with core.async p.99

### Creating an Uberjar

ahead-of-time compilation is useful for Clojure code run from the command line

It uses the :aot keyword in the project.clj file

It creates 2 .jar files in the target directory

.jar

includes the project classes and dependencies but needs a Clojure environment to run in.

-standalone.jar

includes all the Clojure classes it needs, so can be run with  

java -jar

## Web Apps with Clojure & ClojureScript p.111

Clojure library Compojure. It provides routing for a lower-level library called Ring

Create a new project called 'cheshire-cat' using the Compojure template:

lein new compojure cheshire-cat

It creates a normal project structure plus  
resources/public for the web components and  
a test file called handler.clj

### Start a ring webserver

lein ring server [ or 'lein ring server-headless', if you don't want a browser to open ]

This produces a "Hello World" message in the browser, on http://localhost:3000/

## Macros p.143

#Part II - Training Program p.151


=======

It's perhaps worth noting that to have this work with a remote VPS for example, besides the references mentioned above of :nrepl-options and :dependencies keys, the lein nrepl command is best given with :headless and explicit :host nrepl.somehost.com and probably something along the lines of e.g. :port 12345, to not confine the localhost to be truly local (omission of the :host command line argument and value will result in this behavior, as in that port is not exposed to outside). 
>>>>>>> 20ad9b702c5d0b439735dc921d6069f73ecac222
